import asyncio
from telegram import Bot, Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import pytesseract
from PIL import Image, ImageFilter, ImageEnhance
import re
import os
import tempfile


# Variable global saldo
saldo = 0

# ID del usuario que acredita pagos
USER_ID_RESTA = int(os.getenv("useresta"))

# Validación de las variables de entorno
TOKEN = os.getenv("tokenbot")
WEBHOOK_URL = os.getenv("webhook_url")
PORT = int(os.getenv("port", 8443))

if not TOKEN:
    raise ValueError("Falta configurar la variable de entorno 'tokenbot'.")

if not WEBHOOK_URL or not WEBHOOK_URL.startswith("https://"):
    raise ValueError("Falta configurar una URL HTTPS válida en 'WEBHOOK_URL'.")

if not PORT:
    raise ValueError("Falta configurar el puerto en 'PORT'.")

# Crear instancia del bot
bot = Bot(token=TOKEN)

# Regex para reconocer importes en el formato "$ 123.456,78" o similares
REGEX_AMOUNT = r"\$\s?([\d.,]+)"

# Preprocesamiento de imagen


def preprocess_image(image_path):
    """Preprocesa la imagen para mejorar el reconocimiento OCR."""
    image = Image.open(image_path).convert("L")
    enhancer = ImageEnhance.Contrast(image)
    image = enhancer.enhance(2.0)
    image = image.filter(ImageFilter.EDGE_ENHANCE)
    preprocessed_path = image_path.replace(".jpg", "_preprocessed.jpg")
    image.save(preprocessed_path)
    return preprocessed_path

# Extracción del importe del comprobante


def extract_amount_from_receipt(image_path, user_id):
    """Realiza OCR en la imagen y extrae el importe usando el regex."""
    try:
        preprocessed_path = preprocess_image(image_path)
        text = pytesseract.image_to_string(
            Image.open(preprocessed_path), lang='spa')
        print(f"Texto extraído de la imagen: {text}")

        match = re.search(REGEX_AMOUNT, text)
        if match:
            amount = float(match.group(1).replace('.', '').replace(',', '.'))
            if user_id == USER_ID_RESTA:
                amount = -abs(amount)
            print(f"Importe extraído: {amount}")
            return amount
        else:
            print("No se encontró un importe válido en el texto.")
            return None
    except Exception as e:
        print(f"Error procesando la imagen: {e}")
        return None

# Manejo de mensajes de texto


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global saldo
    user_id = update.effective_user.id

    if update.message.chat.type != "group":
        await update.message.reply_text("Este bot solo funciona en grupos.")
        return

    try:
        numero = float(update.message.text.replace(',', '.'))
        if user_id == USER_ID_RESTA:
            numero = -abs(numero)

        saldo += numero
        saldo_mostrar = f"{saldo:,.2f}".replace(
            ',', 'X').replace('.', ',').replace('X', '.')
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"Saldo: $ {saldo_mostrar}"
        )
    except ValueError:
        pass

# Manejo de imágenes de comprobantes


async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global saldo
    user_id = update.effective_user.id

    try:
        photo = update.message.photo[-1]
        file = await photo.get_file()

        with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as temp_file:
            image_path = temp_file.name
            await file.download_to_drive(image_path)

        print(f"Imagen descargada en: {image_path}")
        amount = extract_amount_from_receipt(image_path, user_id)
    except Exception as e:
        print(f"Error manejando la imagen: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="Ha ocurrido un error al procesar la imagen, intenta de nuevo más tarde."
        )
        return
    finally:
        if 'image_path' in locals() and os.path.exists(image_path):
            os.remove(image_path)

    if amount is not None:
        saldo += amount
        saldo_mostrar = f"{saldo:,.2f}".replace(
            ',', 'X').replace('.', ',').replace('X', '.')
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"Saldo: $ {saldo_mostrar}"
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="No se encontró un importe válido en el comprobante."
        )

# Mostrar el saldo actual


async def show_saldo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global saldo
    saldo_mostrar = f"{saldo:,.2f}".replace(
        ',', 'X').replace('.', ',').replace('X', '.')
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"Saldo: $ {saldo_mostrar}"
    )

# Inicio del bot


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="Listo para operar."
    )

# Manejo global de errores


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"Ocurrió un error: {context.error}")
    if update:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="Ha ocurrido un error, intenta de nuevo más tarde."
        )

if __name__ == "__main__":
    async def main():
        application = ApplicationBuilder().token(TOKEN).build()

        # Agregar manejadores
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("saldo", show_saldo))
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(MessageHandler(filters.PHOTO, handle_image))
        application.add_error_handler(error_handler)

        # Configurar webhook
        await bot.set_webhook(url=WEBHOOK_URL)

        # Iniciar el bot
        print("Bot en ejecución con webhooks...")
        await application.start()
        await application.updater.start_polling()
        await application.updater.idle()

    asyncio.run(main())
